/**
 * ┌──────────────────────────────────────────────────────────────────────────────────────────────────┐
 * │                                        CEYBYTE POS                                               │
 * │                                                                                                  │
 * │                                    VAT Reporting Component                                       │
 * │                                                                                                  │
 * │  Description: Sri Lankan VAT calculation and reporting interface with tax compliance features.  │
 * │               Supports 18% standard VAT rate and various exemptions for business reporting.     │
 * │                                                                                                  │
 * │  Author: Akash Hasendra                                                                          │
 * │  Copyright: 2025 Ceybyte.com - Sri Lankan Point of Sale System                                   │
 * │  License: MIT License with Sri Lankan Business Terms                                             │
 * └──────────────────────────────────────────────────────────────────────────────────────────────────┘
 */

import React, { useState, useEffect } from 'react';
import { Card, Button, Input, Select, Tabs, Badge, Alert, Typography, Form, Divider, message, Statistic, Row, Col } from 'antd';
import type { TabsProps } from 'antd';
import { CalculatorOutlined, FileTextOutlined, DownloadOutlined, CalendarOutlined, RiseOutlined } from '@ant-design/icons';
import { calculateVAT, getVATRates } from '@/api/sri-lankan-features.api';
import { formatCurrency } from '@/utils/formatting';

const { Title, Text } = Typography;
const { Option } = Select;

interface VATCalculation {
  subtotal: number;
  vat_amount: number;
  total: number;
  vat_rate: number;
}

interface VATRates {
  standard_rate: number;
  reduced_rates: Array<{
    category: string;
    rate: number;
  }>;
  effective_date: string;
  currency: string;
}

interface VATReport {
  period: string;
  total_sales: number;
  vat_collected: number;
  vat_paid: number;
  net_vat: number;
  exempt_sales: number;
}

export const VATReporting: React.FC = () => {
  const [calculation, setCalculation] = useState<VATCalculation | null>(null);
  const [vatRates, setVATRates] = useState<VATRates | null>(null);
  const [amount, setAmount] = useState<string>('');
  const [selectedRate, setSelectedRate] = useState<number>(18.0);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [reportPeriod, setReportPeriod] = useState<string>('current_month');
  const [vatReport, setVATReport] = useState<VATReport | null>(null);

  useEffect(() => {
    loadVATRates();
  }, []);

  const loadVATRates = async () => {
    try {
      const response = await getVATRates();
      if (response.success && response.data) {
        setVATRates(response.data);
        setSelectedRate(response.data.standard_rate);
      } else {
        setError(response.error || 'Failed to load VAT rates');
      }
    } catch (err) {
      setError('Network error while loading VAT rates');
      console.error('Error loading VAT rates:', err);
    }
  };

  const handleCalculateVAT = async () => {
    if (!amount || isNaN(parseFloat(amount))) {
      setError('Please enter a valid amount');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const response = await calculateVAT(parseFloat(amount), selectedRate);
      if (response.success && response.data) {
        setCalculation(response.data);
      } else {
        setError(response.error || 'Failed to calculate VAT');
      }
    } catch (err) {
      setError('Network error while calculating VAT');
      console.error('Error calculating VAT:', err);
    } finally {
      setLoading(false);
    }
  };

  const generateMockReport = () => {
    const mockReport: VATReport = {
      period: reportPeriod === 'current_month' ? 'January 2025' : 'Q4 2024',
      total_sales: 2500000,
      vat_collected: 450000,
      vat_paid: 85000,
      net_vat: 365000,
      exempt_sales: 150000
    };
    setVATReport(mockReport);
  };

  const exportReport = () => {
    if (!vatReport) return;

    const reportData = `
VAT Report - ${vatReport.period}
================================

Total Sales: ${formatCurrency(vatReport.total_sales)}
VAT Collected: ${formatCurrency(vatReport.vat_collected)}
VAT Paid: ${formatCurrency(vatReport.vat_paid)}
Net VAT Payable: ${formatCurrency(vatReport.net_vat)}
Exempt Sales: ${formatCurrency(vatReport.exempt_sales)}

Generated on: ${new Date().toLocaleDateString()}
Generated by: CeybytePOS
    `.trim();

    const blob = new Blob([reportData], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `vat-report-${vatReport.period.replace(' ', '-').toLowerCase()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    message.success('Report exported successfully!');
  };

  const renderCalculatorTab = () => (
    <Card title={<><CalculatorOutlined /> VAT Calculator</>}>
      <Form layout="vertical">
        <Row gutter={16}>
          <Col span={12}>
            <Form.Item label="Amount">
              <Input
                type="number"
                placeholder="0.00"
                value={amount}
                onChange={(e) => setAmount(e.target.value)}
                style={{ textAlign: 'right' }}
              />
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item label="VAT Rate">
              <Select value={selectedRate} onChange={setSelectedRate}>
                <Option value={18.0}>18% - Standard Rate</Option>
                <Option value={0.0}>0% - Exempt</Option>
                {vatRates?.reduced_rates.map((rate) => (
                  <Option key={rate.category} value={rate.rate}>
                    {rate.rate}% - {rate.category}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
        </Row>

        <Button type="primary" onClick={handleCalculateVAT} loading={loading} block>
          {loading ? 'Calculating...' : 'Calculate VAT'}
        </Button>

        {error && (
          <Alert
            message={error}
            type="error"
            showIcon
            style={{ marginTop: '16px' }}
          />
        )}

        {calculation && (
          <Card style={{ marginTop: '24px' }} size="small">
            <Title level={4}>Calculation Result</Title>
            <Row gutter={16}>
              <Col span={12}>
                <Statistic title="Subtotal" value={calculation.subtotal} formatter={(value) => formatCurrency(Number(value))} />
              </Col>
              <Col span={12}>
                <Statistic 
                  title={`VAT Amount (${calculation.vat_rate}%)`} 
                  value={calculation.vat_amount} 
                  formatter={(value) => formatCurrency(Number(value))}
                  valueStyle={{ color: '#1890ff' }}
                />
              </Col>
            </Row>
            <Divider />
            <Statistic 
              title="Total with VAT" 
              value={calculation.total} 
              formatter={(value) => formatCurrency(Number(value))}
              valueStyle={{ color: '#52c41a', fontSize: '24px' }}
            />
          </Card>
        )}
      </Form>
    </Card>
  );

  const renderRatesTab = () => (
    <Card title="Current VAT Rates">
      {vatRates ? (
        <div>
          <Alert
            message={
              <div>
                <Title level={4} style={{ color: '#1890ff', margin: 0 }}>
                  Standard Rate: {vatRates.standard_rate}%
                </Title>
                <Text type="secondary">Applied to most goods and services</Text>
              </div>
            }
            type="info"
            style={{ marginBottom: '16px' }}
          />

          <Title level={5}>Reduced Rates</Title>
          {vatRates.reduced_rates.map((rate, index) => (
            <div key={index} style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '12px', backgroundColor: '#fafafa', borderRadius: '4px', marginBottom: '8px' }}>
              <Text>{rate.category}</Text>
              <Badge count={`${rate.rate}%`} style={{ backgroundColor: '#f0f0f0', color: '#666' }} />
            </div>
          ))}

          <div style={{ marginTop: '16px', fontSize: '12px', color: '#666' }}>
            <Text type="secondary">Effective Date: {vatRates.effective_date}</Text>
            <br />
            <Text type="secondary">Currency: {vatRates.currency}</Text>
          </div>
        </div>
      ) : (
        <div style={{ textAlign: 'center', padding: '32px' }}>
          <Text type="secondary">Loading VAT rates...</Text>
        </div>
      )}
    </Card>
  );

  const renderReportsTab = () => (
    <Card title={<><RiseOutlined /> VAT Reports</>}>
      <div style={{ marginBottom: '16px' }}>
        <Row gutter={16} align="middle">
          <Col>
            <Text strong>Report Period:</Text>
          </Col>
          <Col>
            <Select value={reportPeriod} onChange={setReportPeriod} style={{ width: 200 }}>
              <Option value="current_month">Current Month</Option>
              <Option value="last_month">Last Month</Option>
              <Option value="current_quarter">Current Quarter</Option>
              <Option value="last_quarter">Last Quarter</Option>
              <Option value="current_year">Current Year</Option>
            </Select>
          </Col>
          <Col>
            <Button type="primary" icon={<CalendarOutlined />} onClick={generateMockReport}>
              Generate Report
            </Button>
          </Col>
        </Row>
      </div>

      {vatReport && (
        <div>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>
            <Title level={4}>VAT Report for {vatReport.period}</Title>
            <Button icon={<DownloadOutlined />} onClick={exportReport}>
              Export
            </Button>
          </div>

          <Row gutter={16}>
            <Col span={8}>
              <Card>
                <Statistic
                  title="Total Sales"
                  value={vatReport.total_sales}
                  formatter={(value) => formatCurrency(Number(value))}
                />
              </Card>
            </Col>
            <Col span={8}>
              <Card>
                <Statistic
                  title="VAT Collected"
                  value={vatReport.vat_collected}
                  formatter={(value) => formatCurrency(Number(value))}
                  valueStyle={{ color: '#1890ff' }}
                />
              </Card>
            </Col>
            <Col span={8}>
              <Card>
                <Statistic
                  title="VAT Paid"
                  value={vatReport.vat_paid}
                  formatter={(value) => formatCurrency(Number(value))}
                  valueStyle={{ color: '#fa8c16' }}
                />
              </Card>
            </Col>
          </Row>

          <Row gutter={16} style={{ marginTop: '16px' }}>
            <Col span={12}>
              <Card>
                <Statistic
                  title="Net VAT Payable"
                  value={vatReport.net_vat}
                  formatter={(value) => formatCurrency(Number(value))}
                  valueStyle={{ color: '#52c41a' }}
                />
              </Card>
            </Col>
            <Col span={12}>
              <Card>
                <Statistic
                  title="Exempt Sales"
                  value={vatReport.exempt_sales}
                  formatter={(value) => formatCurrency(Number(value))}
                  valueStyle={{ color: '#666' }}
                />
              </Card>
            </Col>
          </Row>

          <Alert
            message="This is a sample report for demonstration purposes. Consult with a tax professional for actual VAT compliance."
            type="warning"
            showIcon
            style={{ marginTop: '16px' }}
          />
        </div>
      )}
    </Card>
  );

  const tabItems: TabsProps['items'] = [
    {
      key: 'calculator',
      label: (
        <span>
          <CalculatorOutlined />
          Calculator
        </span>
      ),
      children: renderCalculatorTab(),
    },
    {
      key: 'rates',
      label: (
        <span>
          <FileTextOutlined />
          Rates
        </span>
      ),
      children: renderRatesTab(),
    },
    {
      key: 'reports',
      label: (
        <span>
          <RiseOutlined />
          Reports
        </span>
      ),
      children: renderReportsTab(),
    },
  ];

  return (
    <div style={{ padding: '24px' }}>
      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '24px' }}>
        <div>
          <Title level={2} style={{ margin: 0 }}>VAT Reporting</Title>
          <Text type="secondary">Sri Lankan VAT calculation and compliance</Text>
        </div>
        <Badge count="Sri Lanka VAT System" style={{ backgroundColor: '#f0f0f0', color: '#666' }} />
      </div>

      <Tabs items={tabItems} />
    </div>
  );
};